@page "/book/{Id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject TicketToCode.Client.Services.UserState UserState
@using System.Net.Http.Json

<div class="container my-4" style="max-width: 600px;">
    @if (evt == null)
    {
        <p>Laddar evenemang...</p>
    }
    else
    {
        <h2>Boka biljetter: @evt.Name</h2>
        <p><strong>Datum:</strong> @evt.Start.ToString("f")</p>
        <p><strong>Tillgängliga biljetter:</strong> @evt.AvailableTickets</p>

        @if (!UserState.IsAuthenticated)
        {
            <div class="alert alert-warning">Du måste vara inloggad för att boka biljetter.</div>
        }
        else if (evt.AvailableTickets <= 0)
        {
            <div class="alert alert-danger">Det finns tyvärr inga biljetter kvar.</div>
        }
        else
        {
            <div class="mb-3">
                <label for="tickets" class="form-label">Antal biljetter:</label>
                <input id="tickets" class="form-control" type="number" @bind="numberOfTickets" min="1" max="@evt.AvailableTickets" />
            </div>

            <button class="btn btn-primary" @onclick="BookTickets" disabled="@isBooking">
                @if (isBooking)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                   
        }
                else
                {
                    <span>Boka biljetter</span>
                }
            </button>
        }



            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert mt-3 @(isSuccess ? "alert-success" : "alert-danger")">@message</div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private EventResponse evt;
    private int numberOfTickets = 1;
    private bool isBooking = false;
    private string message = "";
    private bool isSuccess = false;

    public class EventResponse
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public DateTime Start { get; set; }
        public int AvailableTickets { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        evt = await Http.GetFromJsonAsync<EventResponse>($"events/{Id}");
    }

    private async Task BookTickets()
    {
        isBooking = true;
        message = "";

        var response = await Http.PostAsync(
            $"bookings?eventId={evt.Id}&userId={UserState.UserId}&numberOfTickets={numberOfTickets}",
            null);

        if (response.IsSuccessStatusCode)
        {
            isSuccess = true;
            message = "Biljetter bokade!";
            await Task.Delay(1500);
            Navigation.NavigateTo("/mybookings");
        }
        else
        {
            isSuccess = false;
            var error = await response.Content.ReadAsStringAsync();
            message = $"Fel vid bokning: {error}";
        }

        isBooking = false;
    }
}
