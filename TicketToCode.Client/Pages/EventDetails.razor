@page "/eventdetails/{Id:int}"
@inject EventService EventService
@inject BookingService BookingService
@inject AuthService AuthService
@inject NavigationManager Nav
@using TicketToCode.Client.Models
@using TicketToCode.Client.Services
@using Microsoft.AspNetCore.Components


<h3 class="text-center my-4">Evenemangsdetaljer</h3>

@if (eventData == null)
{
    <p>Laddar...</p>
}
else
{
    <div class="event-card large">
        <h4>@eventData.Name</h4>
        <p>@eventData.Description</p>
        <p><strong>Start:</strong> @eventData.Start</p>
        <p><strong>Slut:</strong> @eventData.End</p>
        <p><strong>Platser kvar:</strong> @eventData.NumberOfTickets</p>

        @if (AuthService.CurrentUser is not null)
        {
            <input type="number" min="1" @bind="NumberOfTickets" />
            <button @onclick="Book" class="form-button">Boka biljetter</button>
            <p>@Message</p>
        }
        else
        {
            <p><a href="/login">Logga in</a> för att boka.</p>
        }
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    EventDto? eventData;
    int NumberOfTickets = 1;
    string Message = "";

    protected override async Task OnInitializedAsync()
    {
        eventData = await EventService.GetEvent(Id);
    }

    async Task Book()
    {
        if (AuthService.CurrentUser == null) return;

        var success = await BookingService.BookTickets(new BookingRequest(Id, AuthService.CurrentUser.Id, NumberOfTickets));
        Message = success ? "Bokning lyckades!" : "Bokning misslyckades!";
    }
}
