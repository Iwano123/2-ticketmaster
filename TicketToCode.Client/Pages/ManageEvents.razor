@page "/manageevents"
@inject AuthService AuthService
@inject EventService EventService

<h2 class="text-center my-4">Hantera Evenemang</h2>

@if (AuthService.CurrentUser?.Role != "Admin")
{
    <p class="text-danger">Du har inte behörighet att se denna sida.</p>
}
else
{
    <div class="container mb-5">
        <h4>@(isEditMode ? "Redigera Evenemang" : "Skapa Evenemang")</h4>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <input class="form-control" placeholder="Namn" @bind="eventModel.Name" />
                </div>
                <div class="mb-3">
                    <textarea class="form-control" @bind="eventModel.Description" placeholder="Beskrivning"></textarea>
                </div>
                <div class="mb-3">
                    <select class="form-select" @bind="eventModel.Type">
                        <option value="Workshop">Workshop</option>
                        <option value="Meetup">Meetup</option>
                        <option value="Lecture">Lecture</option>
                    </select>
                </div>
                <div class="mb-3">
                    <input class="form-control" type="datetime-local" @bind="eventModel.Start" />
                </div>
                <div class="mb-3">
                    <input class="form-control" type="datetime-local" @bind="eventModel.End" />
                </div>
                <div class="mb-3">
                    <input class="form-control" type="number" @bind="eventModel.MaxAttendees" placeholder="Max antal deltagare" />
                </div>
                <div class="mb-3">
                    <input class="form-control" type="number" @bind="eventModel.NumberOfTickets" placeholder="Antal biljetter" />
                </div>
                <button class="btn btn-success me-2" @onclick="SaveEvent">Spara</button>
                @if (isEditMode)
                {
                    <button class="btn btn-secondary" @onclick="CancelEdit">Avbryt</button>
                }
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover bg-white rounded shadow-sm">
            <thead class="table-light">
                <tr>
                    <th>Namn</th>
                    <th>Typ</th>
                    <th>Start</th>
                    <th>Slut</th>
                    <th>Deltagare</th>
                    <th>Biljetter</th>
                    <th>Redigera</th>
                    <th>Ta bort</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ev in events)
                {
                    <tr>
                        <td>@ev.Name</td>
                        <td>@ev.Type</td>
                        <td>@ev.Start.ToString("g")</td>
                        <td>@ev.End.ToString("g")</td>
                        <td>@ev.MaxAttendees</td>
                        <td>@ev.NumberOfTickets</td>
                        <td>
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => EditEvent(ev)">Redigera</button>
                        </td>
                        <td>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteEvent(ev.Id)">Ta bort</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    List<EventDto> events = new();
    EventDto eventModel = new();
    bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetAllEvents();
    }

    async Task SaveEvent()
    {
        if (isEditMode)
        {
            await EventService.UpdateEvent(eventModel);
        }
        else
        {
            await EventService.CreateEvent(eventModel);
        }

        events = await EventService.GetAllEvents();
        eventModel = new();
        isEditMode = false;
    }

    void EditEvent(EventDto ev)
    {
        eventModel = new EventDto
            {
                Id = ev.Id,
                Name = ev.Name,
                Description = ev.Description,
                Type = ev.Type,
                Start = ev.Start,
                End = ev.End,
                MaxAttendees = ev.MaxAttendees,
                NumberOfTickets = ev.NumberOfTickets
            };
        isEditMode = true;
    }

    void CancelEdit()
    {
        eventModel = new();
        isEditMode = false;
    }

    async Task DeleteEvent(int id)
    {
        await EventService.DeleteEvent(id);
        events = await EventService.GetAllEvents();
    }
}