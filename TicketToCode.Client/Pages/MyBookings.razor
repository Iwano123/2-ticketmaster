@page "/mybookings"
@inject AuthService AuthService
@inject BookingService BookingService
@using TicketToCode.Client.Models
@using TicketToCode.Client.Services

<h2 class="text-center my-4">Mina Bokningar</h2>

@if (AuthService.CurrentUser == null)
{
    <p class="text-danger">Du måste vara inloggad för att se denna sida.</p>
}
else if (bookings == null)
{
    <p>Laddar bokningar...</p>
}
else if (!bookings.Any())
{
    <p>Du har inga bokningar än.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover bg-white rounded shadow-sm">
            <thead class="table-light">
                <tr>
                    <th>Boknings-ID</th>
                    <th>Evenemang</th>
                    <th>Antal Biljetter</th>
                    <th>Datum</th>
                    <th>Åtgärder</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in bookings)
                {
                    <tr>
                        <td>@booking.Id</td>
                        <td>@booking.EventId</td>
                        <td>@booking.NumberOfTickets</td>
                        <td>@booking.BookingDate.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => CancelBooking(booking.Id)">
                                Avboka
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    List<BookingDto>? bookings;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser != null)
        {
            bookings = await BookingService.GetUserBookings(AuthService.CurrentUser.Id);
        }
    }

    async Task CancelBooking(int bookingId)
    {
        if (await BookingService.CancelBooking(bookingId))
        {
            bookings = bookings?.Where(b => b.Id != bookingId).ToList();
        }
    }
}